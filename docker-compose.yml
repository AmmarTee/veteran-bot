services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: coins
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
    volumes:
      - dbdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d coins"]
      interval: 10s
      timeout: 5s
      retries: 5

  cache:
    image: redis:7-alpine
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  bot:
    build:
      context: ./apps/bot
      dockerfile: Dockerfile
    environment:
      DISCORD_TOKEN: ${DISCORD_TOKEN}
      GUILD_ID: ${GUILD_ID}
      MAIN_CHANNEL_ID: ${MAIN_CHANNEL_ID}
      DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID}
      API_BASE_URL: http://api:8080
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
  ui:
    build:
      context: ./apps/ui
      dockerfile: Dockerfile
    environment:
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID}
      DISCORD_CLIENT_SECRET: ${DISCORD_CLIENT_SECRET}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXT_PUBLIC_API_BASE_URL: ${API_BASE_URL}
      API_BASE_URL: http://api:8080
      DISCORD_TOKEN: ${DISCORD_TOKEN}
      GUILD_ID: ${GUILD_ID}
      DISCORD_SUPERADMIN_ROLE_IDS: ${DISCORD_SUPERADMIN_ROLE_IDS}
      DISCORD_ADMIN_ROLE_IDS: ${DISCORD_ADMIN_ROLE_IDS}
      DISCORD_OPERATOR_ROLE_IDS: ${DISCORD_OPERATOR_ROLE_IDS}
      DISCORD_SUPPORT_ROLE_IDS: ${DISCORD_SUPPORT_ROLE_IDS}
      DISCORD_AUDITOR_ROLE_IDS: ${DISCORD_AUDITOR_ROLE_IDS}
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
      bot:
        condition: service_started

  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    environment:
      PORT: 8080
      PANEL_BASE_URL: ${PANEL_BASE_URL}
      DATABASE_URL: postgres://app:app@db:5432/coins
      REDIS_URL: redis://cache:6379/0
    depends_on:
      - db
      - cache
    ports:
      - "8080:8080"

volumes:
  dbdata:
